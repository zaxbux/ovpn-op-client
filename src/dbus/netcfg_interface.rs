//! # DBus interface proxy for: `net.openvpn.v3.netcfg`
//!
//! This code was generated by `zbus-xmlgen` `3.1.0` from DBus introspection data.
//! Source: `net.openvpn.v3.netcfg_interface.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::dbus_proxy;

use super::constants::{LogGroup, LogLevel};

#[dbus_proxy(
    interface = "net.openvpn.v3.netcfg",
    default_service = "net.openvpn.v3.netcfg",
    default_path = "/net/openvpn/v3/netcfg"
)]
trait NetcfgInterface {
    /// AddDNS method
    #[dbus_proxy(name = "AddDNS")]
    fn add_dns(&self, server_list: &[&str]) -> zbus::Result<()>;

    /// AddDNSSearch method
    #[dbus_proxy(name = "AddDNSSearch")]
    fn add_dnssearch(&self, domains: &[&str]) -> zbus::Result<()>;

    /// AddIPAddress method
    #[dbus_proxy(name = "AddIPAddress")]
    fn add_ipaddress(
        &self,
        ip_address: &str,
        prefix: u32,
        gateway: &str,
        ipv6: bool,
    ) -> zbus::Result<()>;

    /// AddNetworks method
    fn add_networks(&self, networks: &[(&str, u32, bool, bool)]) -> zbus::Result<()>;

    /// Destroy method
    fn destroy(&self) -> zbus::Result<()>;

    /// Disable method
    fn disable(&self) -> zbus::Result<()>;

    /// EnableDCO method
    #[dbus_proxy(name = "EnableDCO")]
    fn enable_dco(&self, dev_name: &str) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// Establish method
    fn establish(&self) -> zbus::Result<()>;

    /// SetRemoteAddress method
    fn set_remote_address(&self, ip_address: &str, ipv6: bool) -> zbus::Result<()>;

    /// Log signal
    #[dbus_proxy(signal)]
    fn log(&self, group: LogGroup, level: LogLevel, message: &str) -> zbus::Result<()>;

    /// NetWorkChange signal
    #[dbus_proxy(signal)]
    fn net_work_change(
        &self,
        type_: u32,
        device: &str,
        details: std::collections::HashMap<&str, &str>,
    ) -> zbus::Result<()>;

    /// acl property
    #[dbus_proxy(property, name = "acl")]
    fn acl(&self) -> zbus::Result<Vec<u32>>;

    /// active property
    #[dbus_proxy(property, name = "active")]
    fn active(&self) -> zbus::Result<bool>;

    /// device_name property
    #[dbus_proxy(property, name = "device_name")]
    fn device_name(&self) -> zbus::Result<String>;

    /// dns_name_servers property
    #[dbus_proxy(property, name = "dns_name_servers")]
    fn dns_name_servers(&self) -> zbus::Result<Vec<String>>;

    /// dns_scope property
    #[dbus_proxy(property, name = "dns_scope")]
    fn dns_scope(&self) -> zbus::Result<String>;
    fn set_dns_scope(&self, value: &str) -> zbus::Result<()>;

    /// dns_search_domains property
    #[dbus_proxy(property, name = "dns_search_domains")]
    fn dns_search_domains(&self) -> zbus::Result<Vec<String>>;

    /// layer property
    #[dbus_proxy(property, name = "layer")]
    fn layer(&self) -> zbus::Result<u32>;
    fn set_layer(&self, value: u32) -> zbus::Result<()>;

    /// log_level property
    #[dbus_proxy(property, name = "log_level")]
    fn log_level(&self) -> zbus::Result<u32>;
    fn set_log_level(&self, value: u32) -> zbus::Result<()>;

    /// modified property
    #[dbus_proxy(property, name = "modified")]
    fn modified(&self) -> zbus::Result<bool>;

    /// mtu property
    #[dbus_proxy(property, name = "mtu")]
    fn mtu(&self) -> zbus::Result<u32>;
    fn set_mtu(&self, value: u32) -> zbus::Result<()>;

    /// owner property
    #[dbus_proxy(property, name = "owner")]
    fn owner(&self) -> zbus::Result<u32>;

    /// reroute_ipv4 property
    #[dbus_proxy(property, name = "reroute_ipv4")]
    fn reroute_ipv4(&self) -> zbus::Result<bool>;
    fn set_reroute_ipv4(&self, value: bool) -> zbus::Result<()>;

    /// reroute_ipv6 property
    #[dbus_proxy(property, name = "reroute_ipv6")]
    fn reroute_ipv6(&self) -> zbus::Result<bool>;
    fn set_reroute_ipv6(&self, value: bool) -> zbus::Result<()>;

    /// txqueuelen property
    #[dbus_proxy(property, name = "txqueuelen")]
    fn txqueuelen(&self) -> zbus::Result<u32>;
    fn set_txqueuelen(&self, value: u32) -> zbus::Result<()>;
}
